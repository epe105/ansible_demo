
---
- name: SCAP STIG Compliance Scanning
  hosts: tags_stig_compliance
  become: yes
  vars:
    scan_results_dir: "/opt/scap-results"
    timestamp: "{{ ansible_date_time.iso8601_basic_short }}"
    
  tasks:
    - name: Install OpenSCAP packages
      dnf:
        name:
          - openscap-scanner
          - scap-security-guide
          - openscap-utils
        state: present

    - name: Create results directory
      file:
        path: "{{ scan_results_dir }}"
        state: directory
        mode: '0755'

    - name: Check available SCAP content
      find:
        paths: /usr/share/xml/scap/ssg/content/
        patterns: "ssg-rhel*-ds.xml"
      register: scap_content

    - name: Display available SCAP content
      debug:
        msg: "Available SCAP content: {{ scap_content.files | map(attribute='path') | list }}"

    - name: Determine RHEL version for SCAP content
      set_fact:
        rhel_version: "{{ ansible_distribution_major_version }}"
        scap_content_file: "/usr/share/xml/scap/ssg/content/ssg-rhel{{ ansible_distribution_major_version }}-ds.xml"

    - name: Check if SCAP content exists
      stat:
        path: "{{ scap_content_file }}"
      register: scap_file_check

    - name: List available STIG profiles
      shell: |
        oscap info "{{ scap_content_file }}" | grep -i stig
      register: stig_profiles
      when: scap_file_check.stat.exists

    - name: Display available STIG profiles
      debug:
        msg: "{{ stig_profiles.stdout_lines }}"
      when: scap_file_check.stat.exists

    - name: Run STIG compliance scan
      shell: |
        oscap xccdf eval \
          --profile xccdf_org.ssgproject.content_profile_stig \
          --results "{{ scan_results_dir }}/stig-results-{{ timestamp }}.xml" \
          --report "{{ scan_results_dir }}/stig-report-{{ timestamp }}.html" \
          --oval-results \
          "{{ scap_content_file }}"
      register: scan_result
      failed_when: false
      when: scap_file_check.stat.exists

    - name: Display scan summary
      debug:
        msg: |
          SCAP Scan completed
          Results: {{ scan_results_dir }}/stig-results-{{ timestamp }}.xml
          Report: {{ scan_results_dir }}/stig-report-{{ timestamp }}.html
          Exit code: {{ scan_result.rc }}
      when: scap_file_check.stat.exists

    - name: Generate compliance summary
      shell: |
        oscap xccdf generate report "{{ scan_results_dir }}/stig-results-{{ timestamp }}.xml" > "{{ scan_results_dir }}/compliance-summary-{{ timestamp }}.html"
      when: scap_file_check.stat.exists and scan_result.rc is defined

    - name: Extract pass/fail counts
      shell: |
        oscap xccdf generate report "{{ scan_results_dir }}/stig-results-{{ timestamp }}.xml" | grep -E "(pass|fail|notapplicable|notchecked)" | wc -l
      register: compliance_stats
      when: scap_file_check.stat.exists and scan_result.rc is defined

    - name: Copy results to local machine (optional)
      fetch:
        src: "{{ item }}"
        dest: "./scap-results/"
        flat: yes
      loop:
        - "{{ scan_results_dir }}/stig-results-{{ timestamp }}.xml"
        - "{{ scan_results_dir }}/stig-report-{{ timestamp }}.html"
      when: scap_file_check.stat.exists and scan_result.rc is defined

    - name: Schedule regular scans (optional)
      cron:
        name: "SCAP STIG compliance scan"
        minute: "0"
        hour: "2"
        day: "1"
        job: "oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_stig --results {{ scan_results_dir }}/monthly-stig-results.xml --report {{ scan_results_dir }}/monthly-stig-report.html {{ scap_content_file }}"
        state: present
      when: scap_file_check.stat.exists

    - name: Fetch HTML report to controller
      fetch:
        src: "{{ scan_results_dir }}/stig-report-{{ timestamp }}.html"
        dest: "./scap-results/"
        flat: yes
      register: fetched
      when: scap_file_check.stat.exists and scan_result.rc is defined
 
    - name: Make fetched HTML path(s) available to later plays
      set_stats:
        per_host: no
        data:
          scap_report_files: >-
            {{ (scap_report_files | default([]))
               + (fetched.results | map(attribute='dest') | list) }}
      when: fetched is defined
 
        
#========= NEW PLAY: publish to existing web server =========
- name: Publish SCAP reports to web server
  hosts: "{{ report_server }}"
  vars:
    ansible_become_user: root
    ansible_become_password: "{{ webadmin_password }}"
    ansible_become_method: sudo
    report_server: PRESIDIOLAB.ORLANDO.WEBSERV
    web_path: /var/www/html/reports/
    # re-use your connection vars if you already set them in other playbooks:
    ansible_user: "{{ webadmin }}"
    ansible_ssh_pass: "{{ webadmin_password }}"
  tasks:
    - name: Copy reports from controller to web server
      copy:
        src: "{{ item }}"
        dest: "{{ web_path }}/"
        mode: '0644'
      loop: "{{ scap_report_files | default([]) }}"
      run_once: true
 